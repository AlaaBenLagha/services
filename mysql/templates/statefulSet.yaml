apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
      app.kubernetes.io/name: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
        app.kubernetes.io/name: mysql
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - "-c"
        - "set -ex\n# Generate mysql server-id from pod ordinal index.\n[[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1\nordinal=${BASH_REMATCH[1]}\necho [mysqld] > /mnt/conf.d/server-id.cnf\n# Add an offset to avoid reserved server-id=0 value.\necho server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf\n# Copy appropriate conf.d files from config-map to emptyDir.\nif [[ $ordinal -eq 0 ]]; then\n  cp /mnt/config-map/primary.cnf /mnt/conf.d/\nelse\n  cp /mnt/config-map/replica.cnf /mnt/conf.d/\nfi          \n"
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - "set -ex\n# Skip the clone if data already exists.\n[[ -d /var/lib/mysql/mysql ]] && exit 0\n# Skip the clone on primary (ordinal index 0).\n[[ `hostname` =~ -([0-9]+)$ ]] || exit 1\nordinal=${BASH_REMATCH[1]}\n[[ $ordinal -eq 0 ]] && exit 0\n# Clone data from previous peer.\nncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql\n# Prepare the backup.\nxtrabackup --prepare --target-dir=/var/lib/mysql          \n"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "1"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - "set -ex\ncd /var/lib/mysql\n  #magic___^_^___line\n# Determine binlog position of cloned data, if any.\nif [[ -f xtrabackup_slave_info && \"x$(<xtrabackup_slave_info)\" != \"x\" ]]; then\n  # XtraBackup already generated a partial \"CHANGE MASTER TO\" query\n  # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)\n  cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in\n  # Ignore xtrabackup_binlog_info in this case (it's useless).\n  rm -f xtrabackup_slave_info xtrabackup_binlog_info\nelif [[ -f xtrabackup_binlog_info ]]; then\n  # We're cloning directly from primary. Parse binlog position.\n  [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1\n  rm -f xtrabackup_binlog_info xtrabackup_slave_info\n  echo \"CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\\\n        MASTER_LOG_POS=${BASH_REMATCH[2]}\" > change_master_to.sql.in\nfi\n        #magic___^_^___line\n# Check if we need to complete a clone by starting replication.\nif [[ -f change_master_to.sql.in ]]; then\n  echo \"Waiting for mysqld to be ready (accepting connections)\"\n  until mysql -h 127.0.0.1 -e \"SELECT 1\"; do sleep 1; done\n        #magic___^_^___line\n  echo \"Initializing replication from clone position\"\n  mysql -h 127.0.0.1 \\\n        -e \"$(<change_master_to.sql.in), \\\n                MASTER_HOST='mysql-0.mysql', \\\n                MASTER_USER='root', \\\n                MASTER_PASSWORD='', \\\n                MASTER_CONNECT_RETRY=10; \\\n              START SLAVE;\" || exit 1\n  # In case of container restart, attempt this at-most-once.\n  mv change_master_to.sql.in change_master_to.sql.orig\nfi\n                #magic___^_^___line\n# Start a server to send backups when requested by peers.\nexec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \\\n  \"xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root\"          \n"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
